
1,5,1,,Laravelがわかる（MVCモデルを理解）,そもそもどういうものなのか,PHPのフレームワーク（PHPにおけるシステム開発を簡単に行えるように用意された枠組みのこと）
2,5,1,,Laravelの処理の流れがわかる,URLが叩かれて画面が表示されるまでの流れ,"URL叩かれる->route->controller->model->blade(html)->js,css(bladeの記載順)"
3,5,1,,Controllerファイルの役割がわかる,どういう役割なのか、利用方法,"routeからの処理を受け取り、最終的に画面を表示する。
コントローラーを一目見れば何をしてるのか分かるのが理想（複雑な処理はRepositoryやmodelに記載して、そのメソッドを呼び出すようにする）"
4,5,1,,repositoryファイルの役割がわかる,どういう役割なのか、利用方法,"コントローラーから呼び出されるファイルで、主にメソッドや定数がまとめられる場所
複雑な処理であったり、汎用的でないメソッドはここに記載する"
5,5,1,,routeファイルの役割がわかる,どういう役割なのか、利用方法,叩かれたURLに対して、設定されたコントローラーのメソッドに処理を渡す役割
6,5,1,,modelファイルの役割がわかる,どういう役割なのか、利用方法,DBのテーブルの数だけ、対応するモデルがあり、コントローラでそのモデルを操作することができる
7,5,1,,requestファイルの役割がわかる,どういう役割なのか、利用方法,画面からの値を受け取ったり、画面で入力された値に対してバリデーション（エラーチェック）ができる
8,5,1,,bladeファイルの役割がわかる,どういう役割なのか、利用方法,"画面を構成する要素を生成するファイル。html,js,css"
9,3,1,,jsファイルの役割がわかる,どういう役割なのか、利用方法,jsを書く場所
10,2,1,,cssファイルの役割がわかる,どういう役割なのか、利用方法,cssを書く場所
11,5,1,,route処理を実装できる,叩かれたURLから指定のControllerのメソッドの処理を呼べる,"Route::get('/', 'HelloController@index');
叩かれたURLに対して、設定されたコントローラーのメソッドに処理を渡す"
12,6,1,,命名規則がわかる,スネーク、キャメル,ファイルによって、キャメルやスネークなどに合わせる
13,6,1,,適切なファイル名が設定できる,,"どの画面の何をするためのファイルなのかが分かるように
ex)一覧表示画面：ListController、詳細表示画面：DetailController"
14,6,1,,適切なメソッド名が設定できる,メソッド名を見ただけで大体どういう処理をするのかがわかるような命名をする,どの画面の何をするためのファイルなのかが分かるようにメソッド名を設定する
15,6,1,,適切な変数名が設定できる,変数名を見ただけで大体どういう使われ方をするのかがわかるような命名をする,"ファイルによって、キャメルやスネークなどに合わせる
変数の中身が分かるような名前を付ける"
16,6,2,,適切なコメントを記載する事ができる,なぜこの処理をするのか、他の人が改修することを前提に,どういう意図でこの処理を実装したのか、メソッドには説明を入れる
17,6,1,,論理削除がわかる,論理削除とは？実用性,テーブルのデータを消した程で扱う削除方法
18,6,1,,物理削除がわかる,物理削除とは？実用性,データを完全に削除
19,5,2,,テーブルからfind()を使ってデータ取得ができる,テーブルからデータを取得する方法はたくさんあるその中でも便利なよく使うメソッド,対象テーブルのID(主キー)を引数に渡してデータを取得する。複数設定可能
20,5,2,,テーブルからget()を使ってデータ取得ができる,テーブルからデータを取得する方法はたくさんあるその中でも便利なよく使うメソッド,対象テーブルのCollectionクラスで取得する
21,5,2,,テーブルからfirst()を使ってデータ取得ができる,テーブルからデータを取得する方法はたくさんあるその中でも便利なよく使うメソッド,対象テーブルのModelクラスで取得する
22,5,2,,テーブルからvalue()を使ってデータ取得ができる,テーブルからデータを取得する方法はたくさんあるその中でも便利なよく使うメソッド,指定した一つのカラムのみを取得する。$data = $users->value('email');
23,5,3,,テーブルから取得した返り値がわかる,modelのオブジェクト、collectionクラス,"get,find,first等で取得した時の返り値"
24,5,3,,テーブルの更新・登録を行うことができる,save()について理解する,"$customer = new CustomerModel; // モデルのインスタンスを生成する（今回は新しくnewしているので新規登録になる）
$customer['t_customer_id'] = $customer_id; // 指定したカラムに対して右辺の値を入れる
$customer->save(); // 更新(既存のデータの場合)、もしくは新規登録(上記の用にnewされた場合)"
25,5,3,,modelの$fillableがわかる,,モデルがその属性以外を持たない
26,5,3,,modelの$fillableが実装できる,,モデルからその属性が取り除かれる
27,6,2,,returnがわかる,,処理を呼び出し元に返す。値と共に返す事もできる。メソッドとかにreturn実装しなかったらそこで処理終わってしまう
28,6,2,,returnの実装ができる,,"return; // 処理だけを返す場合
return $data; // $dataという値も呼び出し元に返す"
29,6,1,,文字列型がわかる,,"' """"でくくられる型。テーブルのカラムがstringで設定されている場合は合わせる"
30,6,1,,整数(int)の型がわかる,,数字が入る型。テーブルのカラムがint等で設定されている場合は合わせる
31,6,1,,日付型(date)がわかる,,日付が入る型（年月日）テーブルのカラムがdate等で設定されている場合は合わせる
32,6,1,,論理型(boolean)がわかる,,trueかfalseか
33,6,2,,配列がわかる,,複数のデータをまとめたい時に使う。[ ]
34,6,2,,配列を実装する,array(),"$fruits = ['banana', 'lemon'];
array(); // こんな感じでも配列作れる"
35,6,2,,配列から値を取得する,[0]、,$fruits[0];
36,6,2,,配列から関数を使って値を取得できる,array_get()、第3引数にデフォルト値設定,そんな関数なかったね。。取る時はindexを指定すればいいよ
37,6,2,,配列に関数を使ってを値を追加する,array_add() ,"array_push($fruits, 'りんご');"
38,6,2,,連想配列がわかる,keyとかvalueとか,配列の一つ一つの値に、名前を付けたバージョン（1つがkeyとvalueで構成されている、それが複数入れれる）
39,6,2,,連想配列を実装する,,"$price = ['ばなな' => 2000, 'リンゴ' => 3000];"
40,6,2,,連想配列から値を取得する,[]を使う,$price['ばなな']; // 2000が取れる
41,6,2,,連想配列に値を追加する,[]を使う,"$price[""いちご""] = 4000;"
42,6,2,,連想配列に関数を使ってを値を追加する,array_merge(),"array_merge($price,array('みかん' => 5000));"
43,6,2,,関数のデフォルト値がわかる,なぜ、関数等を使う際にデフォルト値を設定するのか,値が無い場合を考慮して、デフォルト値が設定できる
44,6,2,,関数のデフォルト値を実装できる,引数,public function (string $hogehoge = null)
45,5,2,,テーブルから取得したmodelオブジェクトを操作できる,値を取ったり,modelオブジェクトからは直接取得したデータを参照できる　（アロー演算子を使うことで ->）
46,5,2,,テーブルから取得したcollectionクラスを操作できる,foreachで回したり,foreachを使うとモデルクラスが１つずつ取り出せる。foreachで回せば一つ一つをmodelオブジェクトとして扱える
47,5,2,,テーブルから取得したデータを画面に出すことができる,,複数表示する場合：取得したコレクション型のデータをコントローラーからbladeファイルに渡して@foreachで回す
48,5,2,,テーブルからwhereを使って条件を絞ったデータの取得ができる,,
49,5,2,,テーブルからcase文を使って条件を絞ったデータの取得ができる,,
50,5,2,,"テーブルからwhereNull,whereNotoNullを使って条件を絞ったデータの取得ができる",,
51,8,2,,テーブルからlikeを使って部分一致のデータの取得ができる,,
52,8,1,,テーブルの主キーについてわかる,,
53,8,1,,テーブルの外部キーについてわかる,,
54,8,1,,テーブル同時のjoinができる,,
55,8,1,,テーブル同時のleftjoinができる,,
56,8,1,,joinとleftjoinを使い分ける事ができる,,
57,8,1,,複数テーブルのリレーションがわかる,主キーや外部キーを予測することができる,
58,8,3,,リレーションを設定することができる,Laravel Eloquent,
59,8,3,,リレーションを使うことができる,Laravel Eloquent,
60,5,1,,デバッグのdd()の使い方がわかる,,dd()の引数に変数等を指定すると画面に黒背景で変数の中身を見ることができる。例）dd($request);
61,3,1,,デバッグのconsole.log()の使い方がわかる,,ブラウザのコンソールに吐き出される。右クリック→検証、もしくはShift + ctrl + j でコンソールを表示することができる
62,3,1,,alert()の使い方がわかる,,alert()の引数に指定したテキストや変数をブラウザの上部にアラート画面として表示させることができる。処理を止めてくれもする
63,5,1,,デバッグの\Log::infoの使い方がわかる,ログの吐き方は部署によって違う,dd()のように引数に指定した変数等が画面に表示されるわけではなくstorage/logs/laravel.logに記載される。
64,6,1,,変数の役割がわかる,どういう時に使うのか,
65,6,1,,変数の実装ができる,宣言、処理の中で使う,
66,6,1,,定数の役割がわかる,どういう時に使うのか,
67,6,1,,定数の実装ができる,宣言、処理の中で使う,
68,6,1,,引数がわかる,,関数内で使う変数を外部から持ってくるときに使う。例）function hoge(ここが引数){}
69,6,1,,引数が実装できる,,
70,6,4,,オブジェクト指向がわかる,,
71,6,4,,クラスがわかる,,
72,6,4,,インスタンス（オブジェクト）がわかる,,
73,6,4,,インスタンスを実装できる,newで生成してインスタンスからプロパティやメソッドを参照する,
74,6,2,,プロパティがわかる,,
75,6,2,,プロパティを実装できる,,
76,6,2,,メソッドがわかる,,
77,6,2,,メソッドを実装できる,,
78,5,3,,静的プロパティがわかる,static,
79,5,3,,静的プロパティを実装できる,static 、::（スコープ演算子）,
80,5,3,,静的メソッドがわかる,static,
81,5,3,,静的メソッドを実装できる,static、::（スコープ演算子）,
82,5,2,,controllerで$thisがわかる,,自分自身のオブジェクトを指し、インスタンス化した際、クラス内のメンバ変数やメソッドにアクセスする際に使用する
83,5,2,,controllerで$thisを実装できる,理解して使える,"class Fruits {
   public $fruits = 'grape ';
   public function output_fruits_name() { return 'lemon '; }

   function test() {
      echo $this->fruits;
      echo $this->output_fruits_name() ;
   }
}

$obj = new Fruits();
$obj->test();"
84,5,2,,controllerでself::がわかる,,クラス定数、static変数を使用する際に使う
85,5,2,,controllerでself::を実装できる,理解して使える,"class Fruits {
   const FRUITS = 'apple ';
   public static $fruits = 'grape ';

   function test() {
      echo self::FRUITS;
      echo self::$fruits;
      echo self::output_fruits_name() ;
   }
}

$obj = new Fruits();
$obj->test();"
86,8,2,,アクセス修飾子publicがわかる,,どのファイルからもアクセス可能。
87,8,2,,アクセス修飾子publicが実装できる,実装して、呼び出しまで,public function hoge ~~~
88,8,2,,アクセス修飾子protectedがわかる,,そのクラス内と継承先からアクセス可能。
89,8,2,,アクセス修飾子protectedが実装できる,実装して、呼び出しまで,protected function hoge ~~~
90,8,2,,アクセス修飾子privateがわかる,,同じクラス内からのみアクセス可能。
91,8,2,,アクセス修飾子privateが実装できる,実装して、呼び出しまで,private function hoge ~~~
92,5,2,,Carbonで時間操作ができる,,
93,5,3,,collection操作ができる,,
94,5,2,,request $requestがわかる,大体どんなデータが入っているのか,
95,5,2,,requestでのバリデーションが実装できる,,
96,5,2,,requestの必須バリデーションが設定できる,required,
97,5,2,,requestの条件付き必須バリデーションが設定できる,required_if,
98,5,1,,requestでのバリデーションでエラーメッセージが実装できる,,
99,5,1,,requestでのバリデーションでエラーメッセージを画面に表示することができる,,
100,5,1,,Controllerから同じクラス内のメソッドを呼び出すことができる,,
101,5,1,,Controllerからrepositoryのメソッドを呼び出すことができる,,
102,5,1,,Controllerからmodelのメソッドを呼び出すことができる,,
103,5,1,,Controllerから画面を表示する処理が実装できる,view(),
104,5,1,,Controllerからbladeに値を渡すことができる,with(),
105,5,1,,Controllerから来た値をbladeで受け取ることができる,,
106,5,1,,bladeからjsに値を渡すことができる,,
107,5,1,,bladeから来た値をjsで受け取ることができる,,
108,5,1,,bladeの値(value)をjsで取得できる,画面で入力された値を取得,
109,5,1,,bladeからControllerに値を渡すことができる,,
110,5,1,,bladeから来た値をControllerで受け取ることができる,input(),
111,5,2,,リダイレクトがわかる,どういう時に使うのか,
112,5,2,,リダイレクトの処理の実装ができる,,
113,8,2,,例外処理がわかる,どういう時に使うのか,
114,8,2,,例外処理が実装できる,,
115,8,2,,セッションがわかる,ログイン中のユーザーとかの情報は大体セッションに入れてる,
6,8,2,,セッションから値を取得できる,ログイン中のユーザーとかの情報は大体セッションに入れてる,
117,6,1,,ローカルとリモートの違いがわかる,,
118,6,1,,Gitのコミットがわかる,,
119,6,1,,Gitのプッシュがわかる,,
120,6,1,,Gitのチェリーピックがわかる,,
121,6,1,,Gitのプルがわかる,,
122,6,1,,Gitのフェッチがわかる,,
123,6,1,,Gitのマージがわかる,,
124,6,2,,Gitの競合が自分で解決できる,コンフリクト,
125,6,3,,ストアドがわかる,,
126,6,3,,ストアドの処理を追うことができる,,
127,6,3,,APIがわかる,どういうものでどういう時に使われるのか,
128,6,3,,APIの処理を追うことができる,,
129,6,4,,APIが実装できる,,
130,6,3,,POSTMANの使い方がわかる,APIを叩くことができる便利なツール,
131,7,4,,非同期通信（ajax）がわかる,,
132,7,4,,非同期通信（ajax）が実装できる,,
133,5,1,,bladeでvalueがわかる,,
134,7,1,,bladeでinput type = 'hidden'がわかる,どういう時に使うのか,
135,7,1,,bladeでinput type = 'hidden'が実装できる,,
136,7,1,,bladeでinput type = 'checkbox'が実装できる,,
137,7,1,,bladeでinput type = 'button'が実装できる,,
138,7,1,,bladeでinput type = 'search'が実装できる,,
139,7,1,,bladeでformがわかる,何につかわれるのか,
140,7,1,,bladeでformを実装できる,URLの設定,
141,7,1,,bladeでformをPOST処理で実装できる,どういう時にPOSTで行うのか、POSTで時に忘れてはいけないcsrf_field(),
142,3,1,,bladeでformの遷移先URLを制御できる,例えば押されたボタンや状況などによってURLを変更できる,
143,3,1,,bladeで複数formある場合にsubmitするformを制御することができる,自分がsubmitしたいformをsubmitする,
144,3,1,,jsでイベントがわかる,イベントという概念やどういうイベントがあるのか,
145,3,1,,jsでクリックされた時の処理が実装できる,,
146,3,1,,jsで画面が読み込まれた時の処理が実装できる,,
147,3,2,,jsで要素の値が変更され、要素が入力フォーカスを失ったときの処理が実装できる,,
148,1,1,,bladeでtableが実装できる,,
149,1,1,,bladeでリストが実装できる,"ul,li",
150,7,1,,bladeやjsのidがわかる,どういう時に使うのか,
151,7,1,,bladeやjsのclassがわかる,どういう時に使うのか,
152,7,1,,bladeやjsのnameがわかる,どういう時に使うのか,
153,6,1,,"class, id, nameの違いがわかる",,
154,5,2,,"bladeファイルでrepository,model等のメソッドを呼ぶことができる",,
155,5,2,,"bladeファイルでrepository,model等の定数を参照する事ができる",,
156,5,2,,bladeファイルの@includeがわかる,,
157,5,2,,bladeファイルの@includeが実装できる,,
158,5,4,,bladeファイルのレイアウト定義についてわかる,@yield()、@section()、@include(),
159,5,1,,bladeファイルでif文を実装できる,三項演算子での書き方とかも,@if(条件)  @endif
160,5,1,,bladeファイルでswitch文を実装できる,,
161,5,1,,bladeファイルでforeach文を実装できる,"key,valueも扱える",@foreach(変数 as 指定した変数)　@foreach
162,5,1,,bladeファイルで変数の有無を確認できる,,
163,5,1,,bladeファイルで画面に変数の中身を表示することができる,echo {{ }},
164,1,1,,bladeファイルでjsファイルの読み込みができる,,
165,1,1,,bladeファイルでcssファイルの読み込みができる,,
166,5,2,,bladeファイルの@extendsがわかる,@isset、@empty,
167,5,2,,bladeファイルの@extendsが実装できる,,
168,5,2,,Controllerファイルのextendsがわかる,,
169,5,2,,Controllerファイルのextendsが実装できる,,
170,5,2,,namespace（名前空間）がわかる,,ファイルがどの空間にあるのかを示す
171,5,2,,namespace（名前空間）が実装できる,,namespace hogehoge\hoge
172,5,2,,use（use宣言）がわかる,なぜ使うのかがわかる,インポートしたり、エイリアスを作成したりできる
173,5,2,,use（use宣言）が実装できる,,use hogehoge\hoge
174,5,2,,use（use宣言）したファイルを別名指定できる,as,use hogehoge\hoge as fuga
175,7,1,,submitがわかる,,
176,5,1,,submitがbaldeで実装できる,,
177,3,1,,submitがjsで実装できる,,
178,3,2,,jsで thisがわかる,,
179,3,2,,jsで thisが実装できる,,
180,6,2,,変数の判定（$var=1）ができる,値が入っているかどう,if($var == 1){ } // 変数の中身が1かどうか
181,6,2,,"変数の判定（$var="""";）ができる",空判定,if($var == ’’){ } // 変数の中身が空白（ブランク）かどうか
182,6,2,,変数の判定（$var=NULL;）ができる,NULLかどうか,if($var === null){ } // 変数の中身がnullかどうか //
183,6,2,,変数の判定コレクション型の空判定ができる,空判定,if($var->isEmpty() == true){ } // 空の場合はtrue コレクション型はget()で取った時の型です
184,6,2,,変数の判定配列の空判定ができる,空判定,if(empty($var) == true){ } // 配列が空の時はtrue
185,6,4,,メンターに適切な質問ができる,自分でどう調べて何がわからなかったか,質問内容の共有（聞きたいこと）▶現状共有（どういうエラーが出たか、試したこと、スクショ等あれば◯）
186,6,2,,トランザクションテーブルについてわかる,,システムを使うことで蓄積されていくデータ
187,6,2,,マスターテーブルについてわかる,マスタのこと,何かの基礎となるデータ。システムを使う最初の段階から入ってないと困るデータ
188,3,1,,confirmを使いこなせる,,if(!confirm('確認メッセージ')){return false;}
189,6,1,,空配列を作成できる,,let array = [];
190,3,1,,location.hrerfがわかる,,JavaScriptでlocation.href = URLで指定のＵＲＬに遷移することができる。
191,6,1,,型の意味が分かる,,
192,3,1,,クリックイベントが実装できる,,
193,3,1,,フォームの要素を取得できる,,
194,6,2,,バリデーションを自作できる,,
195,3,2,,HTMLを操作できる,JavaScriptで,
196,3,1,,JSでCSSが操作できる,,
197,3,1,,JSをjQueryに書き換えられる,,document.getElementById('id名').value(); を$('id名').val();で書ける
198,1,2,,radioボタンからデータを取得する,,
199,6,1,,正規表現を扱う,,
200,3,1,,let const varの違いが説明できる,,
201,6,1,,三項演算子が使える,,"JS）beverage = (age >= 21) ? ""ビール"" : ""ジュース""; PHP)$lang == 'Jp'  ? 'こんにちは' : 'Hello';"
202,3,1,,"ready, loadがわかる",,readyはほかのCSSやJSファイルが読み込まれたタイミングで、loadはすべてのものが呼び出された後に実行される
203,3,2,,"ready, loadが使える",,https://obvious-sidecar-c0d.notion.site/ready-load-1dd8af22b4ea448898c8101f0a418d80
204,3,1,,算術演算子における％の意味が分かる,,余り。12 % 5 で２という値が取得できる
205,6,1,,"""""と''の違いがわかる",,
206,6,1,,"false,undefined,null,0,NaNの違いが判る",,"falseは真偽値、undefinedはそもそも存在しない,nullは値がない、0は0,NaNはNot a Numberで数字でないもの"
207,2,1,,flexboxが使いこなせる,,display:flex;を宣言した後、横に関する指定はjustify-content、縦に関する指定はaligin-itemsで要素を動かす
208,2,1,,paddingとmarginの違いが判わかる,,paddingはボタンでいうクリック可能な領域に関する余白、marginはボタンの外側のクリックできない要素の余白を指定する
209,2,2,,"pxとem,hv,hwなどの単位が説明できる",,emはpxの何倍か、hvはビューポートの高さに対する割合、hwはビューポートの幅に対する割合を表す
210,2,1,,要素を天地中央揃えできる,,display:flex;を親要素に指定した後、横の中央揃えはjustify-content:center;縦はaligin-items:center;で指定する。
211,2,4,,JSプラグインのCSSカスタマイズができる,,
212,2,2,,transformについて理解する,,角度を変えたり上下左右に要素を動かすことができる。例えばtransform: rotate(90deg);で90度要素を回転させることができる
213,2,3,,モーダルを作成できる,,
214,2,2,,z-indexについて理解している,,z軸のことで三次元で考えた時の奥行きを表す。要素をCSSでずらしたときなどに重なりの順を指定できる
215,2,1,,floatを使わずに横並びが実装できる,,display:flex;を使う。指定するときは横並びにしたい親要素に対してflexをかける
216,2,2,,デベロッパーツールを用いてCSSの調査ができる,,ツールを使うと要素部分が青色、paddingは緑色、marginはオレンジ色で表示されるので余計なmarginがないかなどを調査できる
217,2,1,,それぞれのタグについて説明できる,,<a>タグはリンクでインライン要素、<p>はテキストでブロック要素<input>はファイルやチェックボックスなど様々なことができるなどなど
218,2,1,,フォームを作成できる,,"<form action="""" method=""""></form> actionはフォームデータの送信先、methodはPOSTやGETなどの通信方法を指定する"
219,2,1,,正しい入れ子について理解している,,https://yoshikawaweb.com/element/
220,7,1,,"target=""_blank""がわかる",,"<a href=""URL"" target=""_blank""></a>こう指定することで別タブでウインドを開くことができる"
221,7,1,,inputの使い分けができる,,"テキストの時はtype=""text"", パスワードの時はtype=""password"", ファイルはtype=""file""などなど"
222,7,1,,input[type=button]とaタグの両方で送信ボタンを作成できる,,ともにクリックイベントでフォームの値などを取得し最後に$('').submit();でフォームを送信することができる。
223,1,1,,テーブルが作成できる,,php artisan make:migration create_テーブル名_table
224,1,3,,CSSを意識したHTMLを書くことができる,,例えばdisplay:flex;を使うときに親要素と子要素にHTMLを意図的に増やしたりできるなど
225,1,3,,既存のHTML構造に合わせた追加を行うことができる,,例）カードスタイルなどではHTMLをほかに合わせないと１つだけレイアウトが崩れてしまったりするので周りのHTMLをコピペして使うようにする
226,8,2,,認証機能を実装できる,,https://qiita.com/apricotcomic/items/d7407d4b12f41e2ff5ed
227,6,1,,undefinedが解決できる,,定義されていない変数や関数を使おうとしているのでエラーになる。変数や関数を定義する
228,6,1,,404エラーの意味が分かる,,リンクに設定されたページが存在しないときにでるエラー
229,6,1,,〇〇 doesn`t exsitがわかる,,テーブルなどが存在しないときにエラーになる。大体が綴りミス
230,5,1,,ログイン後の遷移先をカスタマイズできる,,app/Providers/RouteServiceProvider.php　の　public const HOME = '/home';の/home部分を変更する
231,8,1,,__constructメソッドの意味がわかる,,コントローラが呼び出されたときに必ず先に__constructメソッドを実行してから対象のメソッドが実行される
232,8,1,,__constructメソッドが実装できる,,"public function __construct()
    {
        $this->middleware('auth');
    }　　　　　　　　　　　　　　　　　　　　　など"
233,5,1,,カラムの追加ができる,,php artisan make:migration add_追加するカラム名_to_テーブル名_table --table=posts
234,5,1,,カラムの削除ができる,,php artisan make:migration drop_column_カラム_column --table=テーブル名
235,5,1,,URLから変数を取得できる,,"RouteファイルでRoute::('/{id}', 'Controller@index');みたいな感じで、{}で囲てあげるとコントローラの引数で$idとして取得できる"
236,3,1,,val()が使いこなせる,jQuery,"JavaScriptではvalue jQueryでは$('セレクタ').val()でinputなどのvalue=""""の値を取得できる。val(何か値)でするとinputなどのvalueに値が追加される"
237,3,1,,$('')で適切なセレクタが指定できる,jQuery,idの場合は# クラスの場合は. 要素の場合はそのまま【例：$('form')】
238,3,1,,メソッドチェーンがわかる,jQuery,$('').parent().parent().parent().val() みたいな感じでメソッド同士をつなげて書くことができる
239,7,1,,try catch構文がわかる,,try{ 成功したときの処理}catch{失敗したときの処理}　基本的にはDBに接続するときに使う
240,3,1,,クリックイベントが実装できる,jQuery,"$('').on('click', function(){ 何かしらの処理});"
241,3,1,,array()と[]の違いがわかる,,array(6)は６つの空配列ができる[6]は数字の配列
242,3,1,,inputイベントがわかる,jQuery,https://ginpen.com/2018/01/30/realtime-form-values/
243,1,2,,labelとradioの関係性がわかる,,inputのidとlabelのforの値を同じにするとlabelをクリックするだけでinputの値が変わる
244,5,2,,{{ }}と{!! !!}の違いがわかる,Laravel,{{ }} でくくった場合は htmlspecialchars でエスケープされる、 {!! !!} はされない
245,3,1,,hasClassメソッドがわかり実装できる,jQuery,"$(this).hasClass(""クラス名"")とすると指定された要素に指定したクラス名があるかどうかを確認できる。返り値は真偽値"
246,3,1,,findメソッドがわかり実装できる,jQuery,https://www.bold.ne.jp/engineer-club/jquery-find
247,3,1,,"show(),hide()メソッドが適切に使える",jQuery,モーダルの表示非表示などを行う際に使える。display:noneの付け替えを行うことで要素の表示切替をする
248,3,1,,タグの指定された属性にアクセスできる,jQuery,"$('a').attr('class', 'hoge')でaタグのクラスをhogeに, attr('id', 'hoge');でidをhogeに変更できる"
249,6,1,,JavaScript(jQuery)とLaravelの連携ができる,データをお互いに渡せるか,基本的にはLaravelからinputのhiddenなどのvalueに追加し、jQueryのval()で取得するか、jQueryでURLに値をセットしコントローラで受け取る
250,3,1,,triggerメソッドがわかり実装できる,jQuery,$('input').trigger('click');でinputがクリックされなくてもクリックイベントを実行させることができる
251,5,1,,eloquentとクエリビルダの違いがわかる,,クエリビルダは\DB::table('テーブル名')、eloquentはモデル名::get()とかで書き方の違い。複雑なSQLを書くときはクエリビルダ。
252,1,1,,セレクトタグの使い方がわかる,,"<select name=""example"">
<option value=""サンプル1"">サンプル1</option>
<option value=""サンプル2"">サンプル2</option>
<option value=""サンプル3"">サンプル3</option>
</select>"
253,8,1,,GETとPOSTの違いがわかる,,
